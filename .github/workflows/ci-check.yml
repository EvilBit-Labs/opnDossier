name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  pull-requests: read

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    name: test
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: stable
          check-latest: true

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Install Just
        uses: taiki-e/install-action@just

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: Setup golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0

      - name: Run CI Check
        run: just ci-check


  test-with-coverage:
    name: Run tests and collect coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Go
        uses: actions/setup-go@v5

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -coverprofile=coverage.txt ./...

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: EvilBit-Labs/opnDossier

  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v4
        id: scan
        with:
          path: "."
          fail-build: true
          severity-cutoff: high

      - name: Upload vulnerability scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}


  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true

      - name: Build for multiple platforms
        run: |
          # Build for current platform
          go build -v -o opndossier main.go

          # Cross-compile for other platforms
          GOOS=linux GOARCH=amd64 go build -v -o opndossier-linux-amd64 main.go
          GOOS=darwin GOARCH=amd64 go build -v -o opndossier-darwin-amd64 main.go
          GOOS=windows GOARCH=amd64 go build -v -o opndossier-windows-amd64.exe main.go

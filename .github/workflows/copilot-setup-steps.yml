name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
    inputs:
      install_extra_tools:
        description: 'Install additional development tools (git-cliff, grype, syft)'
        required: false
        default: false
        type: boolean
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true
          check-latest: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Just
        uses: taiki-e/install-action@just

      - name: Setup Python virtual environment
        run: |
          set -euo pipefail

          python3 -m venv .venv
          source .venv/bin/activate
          pip install pre-commit mkdocs-material

      - name: Install dependencies
        run: |
          set -euo pipefail

          # Only run Go module commands if go.mod exists
          if [ -f "go.mod" ]; then
            go mod download
            go mod tidy
            go mod verify
          else
            echo "go.mod not found, skipping Go module commands"
          fi

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: v2.3.1

      - name: Install goimports
        run: |
          set -euo pipefail

          go install golang.org/x/tools/cmd/goimports@latest

      - name: Install development tools
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.install_extra_tools == 'true'
        run: |
          set -euo pipefail

          # Create tools directory
          mkdir -p /usr/local/bin

          # Install git-cliff for changelog generation (v2.10.0)
          echo "Installing git-cliff v2.10.0..."
          GIT_CLIFF_URL="https://github.com/orhun/git-cliff/releases/download/v2.10.0/git-cliff-2.10.0-x86_64-unknown-linux-gnu.tar.gz"
          GIT_CLIFF_SHA256="26b33340c253c567e40a79a5cfab176d682dc3bfdb40136c7ba2d7321796c8b3"

          curl -L -s "$GIT_CLIFF_URL" -o /tmp/git-cliff.tar.gz
          echo "$GIT_CLIFF_SHA256 /tmp/git-cliff.tar.gz" | sha256sum -c
          tar -xzf /tmp/git-cliff.tar.gz -C /tmp
          mv /tmp/git-cliff /usr/local/bin/
          chmod +x /usr/local/bin/git-cliff

          # Install Grype for vulnerability scanning (v0.97.2)
          echo "Installing grype v0.97.2..."
          GRYPE_URL="https://github.com/anchore/grype/releases/download/v0.97.2/grype_0.97.2_linux_amd64.tar.gz"
          GRYPE_SHA256="9db8daad914906aae9a2d99c75ed2bde19fb33e5ea3e14e5b814c6029e1034a9"

          curl -L -s "$GRYPE_URL" -o /tmp/grype.tar.gz
          echo "$GRYPE_SHA256 /tmp/grype.tar.gz" | sha256sum -c
          tar -xzf /tmp/grype.tar.gz -C /tmp
          mv /tmp/grype /usr/local/bin/
          chmod +x /usr/local/bin/grype

          # Install Syft for SBOM generation (v1.30.0)
          echo "Installing syft v1.30.0..."
          SYFT_URL="https://github.com/anchore/syft/releases/download/v1.30.0/syft_1.30.0_linux_amd64.tar.gz"
          SYFT_SHA256="f0cdcba0b6ce4c7a87050d524f732ba9fa2e711835f993a4ef108cfbf928ec13"

          curl -L -s "$SYFT_URL" -o /tmp/syft.tar.gz
          echo "$SYFT_SHA256 /tmp/syft.tar.gz" | sha256sum -c
          tar -xzf /tmp/syft.tar.gz -C /tmp
          mv /tmp/syft /usr/local/bin/
          chmod +x /usr/local/bin/syft

          # Clean up temporary files
          rm -f /tmp/*.tar.gz


      - name: Install markdown linting tools
        run: |
          set -euo pipefail
          npm install -g markdownlint-cli2@0.7.0



      - name: Install pre-commit hooks
        run: |
          set -euo pipefail

          source .venv/bin/activate
          pre-commit install --hook-type commit-msg

      - name: Verify setup
        run: |
          set -euo pipefail

          # Verify Go installation
          go version

          # Verify Just installation
          just --version

          # Verify golangci-lint installation
          golangci-lint version

          # Verify pre-commit installation
          source .venv/bin/activate
          pre-commit --version

          # Verify Python environment
          source .venv/bin/activate
          python --version
          pip list | grep mkdocs-material
          pip list | grep pre-commit

          # Verify extra tools if installed
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.install_extra_tools }}" == "true" ]; then
            echo "Verifying extra tools installation..."
            git-cliff --version
            grype version
            syft version
          fi

      - name: Run project validation
        run: |
          set -euo pipefail

          # Check if Justfile exists before running just commands
          if [ -f "justfile" ]; then
            # Run complete CI check to validate setup
            just ci-check

            # Run tests to ensure everything works
            just test

            # Check code formatting compliance
            just format-check

            # Validate documentation structure
            just docs-test
          else
            echo "Justfile not found, skipping just-based validation steps"
          fi

      - name: Generate documentation
        run: |
          set -euo pipefail

          # Generate API documentation
          go doc -all ./...

          # Check if Justfile exists before running just commands
          if [ -f "justfile" ]; then
            # Update project documentation
            just docs-export
          else
            echo "Justfile not found, skipping just docs-export"
          fi

          # Check if Node.js is available for any Node.js-dependent documentation tasks
          if ! command -v node >/dev/null 2>&1; then
            echo "Node.js not available, some documentation tasks may be limited"
          fi

      - name: Validate markdown formatting
        if: success()
        run: |
          set -euo pipefail

          # Check if Node.js is available before running markdown linting
          if ! command -v node >/dev/null 2>&1; then
            echo "Node.js not available, skipping markdown linting"
            exit 0
          fi

          # Ensure deterministic markdown linting by setting environment variables
          export MARKDOWNLINT_CLI2_FIX=0
          export MARKDOWNLINT_CLI2_IGNORE_PATH=.markdownlintignore

          # Sort files for deterministic processing order
          find docs -name "*.md" -type f | sort | xargs markdownlint-cli2
          find . -maxdepth 1 -name "*.md" -type f | sort | xargs markdownlint-cli2

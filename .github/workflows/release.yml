name: release

on:
  push:
    tags:
      - 'v*'
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  goreleaser:
    permissions:
      contents: write
      packages: write
      issues: write
      id-token: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: '1.24'
          check-latest: true

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0
        with:
          cosign-release: 'v2.2.4'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6.3.0
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate artifact hashes for SLSA
        id: hash
        run: |
          # Generate hashes for SLSA provenance
          cd dist
          # Enable nullglob to handle missing file types gracefully
          shopt -s nullglob
          # Collect all artifact files into an array
          ARTIFACTS=(*.tar.gz *.zip *.deb *.rpm *.apk *.pkg.tar.xz opnDossier_checksums.txt)
          # Generate hashes for all existing files
          sha256sum "${ARTIFACTS[@]}" > opnDossier_checksums.txt

      - name: Upload checksum file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: checksums
          path: dist/opnDossier_checksums.txt
          retention-days: 1

      - name: Sign artifacts with Cosign
        run: |
          # Sign all release artifacts
          cosign sign-blob --yes --bundle cosign.bundle dist/opnDossier_checksums.txt
          # Upload the bundle as a release asset would be handled by a subsequent step
        env:
          COSIGN_EXPERIMENTAL: 1

  provenance:
    needs: goreleaser
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      actions: read
      contents: write
      id-token: write
    runs-on: ubuntu-latest
    outputs:
      base64-subjects: ${{ steps.generate-subjects.outputs.base64-subjects }}
    steps:
      - name: Download checksum artifact
        uses: actions/download-artifact@v4
        with:
          name: checksums
          path: .

      - name: Generate base64 subjects
        id: generate-subjects
        run: |
          # Generate base64 encoded hash for the checksum file
          HASHES=$(sha256sum opnDossier_checksums.txt | base64 -w0)
          echo "base64-subjects=${HASHES}" >> "$GITHUB_OUTPUT"

  slsa-provenance:
    needs: provenance
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      actions: read
      contents: write
      id-token: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: ${{ needs.provenance.outputs.base64-subjects }}
      provenance-name: "opnDossier-${{ github.ref_name }}.intoto.jsonl"

  verification:
    needs: [goreleaser, slsa-provenance]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Install SLSA Verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.5.1

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Verify provenance
        run: |
          slsa-verifier verify-artifact \
            --provenance-path "${{ needs.slsa-provenance.outputs.provenance-name }}" \
            --source-uri github.com/EvilBit-Labs/opnDossier \
            --source-tag "${{ github.ref_name }}" \
            dist/opnDossier_checksums.txt


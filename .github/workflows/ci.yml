name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  pull-requests: read

jobs:
  test:
    strategy:
      matrix:
        go: [1.24, stable]
        os: [ubuntu-latest, macos-latest, windows-latest]
    name: test
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          check-latest: true

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: Run pre-commit checks
        run: |
          # Install pre-commit if not available
          python -m pip install --upgrade pip
          python -m pip install pre-commit
          pre-commit run --all-files

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.3

      - name: Run security scan
        run: |
          # Install gosec if not available
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          gosec ./...

      - name: Run modernize checks
        run: |
          go run golang.org/x/tools/gopls/internal/analysis/modernize/cmd/modernize@latest -test ./...

      - name: Build
        run: go build -v ./...

  quality:
    name: quality-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true

      - name: Install dependencies
        run: |
          go mod download
          go mod verify

      - name: Run comprehensive quality checks
        run: |
          # Install required tools
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
          python -m pip install --upgrade pip
          python -m pip install pre-commit

          # Run all quality checks
          pre-commit run --all-files
          go test -v -race ./...
          golangci-lint run ./...
          go vet ./...
          gosec ./...
          go run golang.org/x/tools/gopls/internal/analysis/modernize/cmd/modernize@latest -test ./...
          go build -v ./...

  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true

      - name: Build for multiple platforms
        run: |
          # Build for current platform
          go build -v -o opnfocus main.go

          # Cross-compile for other platforms
          GOOS=linux GOARCH=amd64 go build -v -o opnfocus-linux-amd64 main.go
          GOOS=darwin GOARCH=amd64 go build -v -o opnfocus-darwin-amd64 main.go
          GOOS=windows GOARCH=amd64 go build -v -o opnfocus-windows-amd64.exe main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: builds
          path: |
            opnfocus
            opnfocus-linux-amd64
            opnfocus-darwin-amd64
            opnfocus-windows-amd64.exe

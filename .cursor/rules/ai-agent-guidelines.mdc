---
description: AI Agent Guidelines for opnFocus development
globs: ["**/*.go", "**/*.md", "**/justfile", "**/*.yaml", "**/*.json"]
alwaysApply: true
---

# AI Agent Development Guidelines

## Rule Precedence

**CRITICAL - Rules are applied in the following order of precedence:**

1. **Project-specific rules** (from project root instruction files like AGENTS.md or .cursor/rules/)
2. **General development standards** (outlined in this document)
3. **Language-specific style guides** (Go conventions, etc.)

When rules conflict, always follow the rule with higher precedence.

## AI Agent Mandatory Practices

When AI agents contribute to this project, they must:

01. **Always run tests** after making changes: `just test`
02. **Run linting** before committing: `just lint`
03. **Follow the established patterns** shown in existing code
04. **Use the preferred tooling commands** listed in AGENTS.md
05. **Write comprehensive tests** for new functionality
06. **Include proper error handling** with context
07. **Add structured logging** for important operations
08. **Validate all inputs** and handle edge cases
09. **Document new functions and types** following Go conventions
10. **Never commit secrets** or hardcoded credentials
11. **Consult project documentation** - requirements.md, ARCHITECTURE.md, and DEVELOPMENT_STANDARDS.md for guidance
12. When rendering reports, always prefer structured config data + audit overlays over flat summary tables
13. Blue team output should favor clarity, grouping, and actionability. Red team output should favor target prioritization and pivot surface discovery
14. Validate all generated markdown for formatting correctness using mdformat or markdownlint

## AI Agent Code Review Checklist

Before submitting code, AI agents must verify:

- [ ] Code follows Go formatting standards (`gofmt`)
- [ ] All linting issues resolved (`golangci-lint`)
- [ ] Tests pass (`go test ./...`)
- [ ] Error handling includes proper context
- [ ] Logging uses structured format with appropriate levels
- [ ] No hardcoded secrets or credentials
- [ ] Input validation implemented where needed
- [ ] Documentation updated for new features
- [ ] Dependencies properly managed (`go mod tidy`)
- [ ] Code follows established patterns and interfaces
- [ ] Requirements compliance verified against requirements.md
- [ ] Architecture patterns followed per ARCHITECTURE.md
- [ ] Development standards adhered to per DEVELOPMENT_STANDARDS.md

## Preferred Task Runner Commands

All development tasks should be executed through the justfile:

```bash
# Development workflow
just dev                 # Run the application in development mode
just install            # Install dependencies and setup environment
just build              # Complete build with all checks

# Code quality
just format             # Run formatting fixes
just lint               # Run linting checks
just check              # Run pre-commit hooks and comprehensive checks
just ci-check           # Run CI-equivalent checks locally

# Testing
just test               # Run the full test suite

# Maintenance
just update-deps        # Update and verify dependencies
just docs               # Serve documentation locally
```

## Configuration Management Guidelines

**Important Note**: `viper` is used for managing the opnFocus application's own configuration (CLI settings, display preferences, etc.), not for parsing OPNsense config.xml files. The OPNsense configuration parsing is handled separately by the XML parser in `internal/parser/`.

## Data Processing Patterns

### Data Model Standards

- **OpnSenseDocument**: Core data model representing entire OPNsense configuration
- **XML Tags**: Must strictly follow OPNsense configuration file structure
- **JSON/YAML Tags**: Follow recommended best practices for each format
- **Audit-Oriented Modeling**: Create internal structs (`Finding`, `Target`, `Exposure`) that represent red/blue audit concepts separately from core config structs

### Report Generation

- **Presentation-Aware Output**: Each report mode must format and prioritize data differently based on audience: ops (standard), defense (blue), adversary (red)
- **Data Processing Pipeline**: Transform the data model into different report formats
- Blue team reports should favor clarity, grouping, and actionability
- Red team reports should favor target prioritization and pivot surface discovery

## Multi-Format Export Standards

### Export Features

- **Purpose**: Export OPNsense configurations to markdown, JSON, or YAML formats
- **Usage**: `opnfocus convert config.xml --format [markdown|json|yaml]`
- **File Quality**: Exported files must be valid and parseable by standard tools and libraries
- **Output Control**: Smart file naming with overwrite protection and `-f` force option

### Validation System

- **Purpose**: Enhance configuration integrity by validating against rules and constraints
- **Usage**: Automatically applied during parsing, or explicitly initiated via CLI
- **Performance**: Handle large configurations using streamlined memory-efficient approaches

## Required Documentation References

AI agents must familiarize themselves with:

- **[requirements.md](project_spec/requirements.md)** - Complete functional and technical requirements
- **[ARCHITECTURE.md](ARCHITECTURE.md)** - System design, data flow, and component architecture
- **[DEVELOPMENT_STANDARDS.md](DEVELOPMENT_STANDARDS.md)** - Go-specific coding standards and project structure

These documents provide the complete context needed for effective development and decision-making within the opnFocus project.

---
globs: **/*.md,**/*.go,**/justfile
alwaysApply: false
---
# Development Workflow Guidelines

## AI Agent Mandatory Practices

When AI agents contribute to this project, they must:

01. **Always run tests** after making changes: `just test`
02. **Run linting** before committing: `just lint`
03. **Follow the established patterns** shown in existing code
04. **Use the preferred tooling commands** listed in AGENTS.md
05. **Write comprehensive tests** for new functionality
06. **Include proper error handling** with context
07. **Add structured logging** for important operations
08. **Validate all inputs** and handle edge cases
09. **Document new functions and types** following Go conventions
10. **Never commit secrets** or hardcoded credentials
11. **Consult project documentation** - requirements.md, ARCHITECTURE.md, and DEVELOPMENT_STANDARDS.md for guidance
12. When rendering reports, always prefer structured config data + audit overlays over flat summary tables
13. Blue team output should favor clarity, grouping, and actionability. Red team output should favor target prioritization and pivot surface discovery
14. Validate all generated markdown for formatting correctness using mdformat for formatting and markdownlint-cli2 for validation

## AI Agent Code Review Checklist

Before submitting code, AI agents must verify:

- [ ] Code follows Go formatting standards (`gofmt`)
- [ ] All linting issues resolved (`golangci-lint`)
- [ ] Tests pass (`go test ./...`)
- [ ] Error handling includes proper context
- [ ] Logging uses structured format with appropriate levels
- [ ] No hardcoded secrets or credentials
- [ ] Input validation implemented where needed
- [ ] Documentation updated for new features
- [ ] Dependencies properly managed (`go mod tidy`)
- [ ] Code follows established patterns and interfaces
- [ ] Requirements compliance verified against requirements.md
- [ ] Architecture patterns followed per ARCHITECTURE.md
- [ ] Development standards adhered to per DEVELOPMENT_STANDARDS.md

## Pre-Development Checklist

### Requirements Review

- **Requirement Alignment**: Verify changes align with current requirements
- **Task Reference**: Check if changes relate to specific tasks in [tasks.md](project_spec/tasks.md)
- **Documentation Impact**: Identify which documentation needs updates
- **Architecture Compliance**: Ensure changes follow [ARCHITECTURE.md](ARCHITECTURE.md) patterns

### Code Quality Standards

- **Go Standards**: Follow Go conventions and [DEVELOPMENT_STANDARDS.md](DEVELOPMENT_STANDARDS.md)
- **Error Handling**: Implement proper error handling with context
- **Logging**: Use structured logging for important operations
- **Testing**: Write comprehensive tests for new functionality

## Development Process

### Implementation Steps

1. **Review Requirements**: Understand the specific requirements being implemented
2. **Check Existing Code**: Review similar implementations for patterns
3. **Implement Changes**: Follow established patterns and conventions
4. **Write Tests**: Create comprehensive test coverage
5. **Update Documentation**: Update relevant documentation files

### Quality Assurance

- **Format Code**: Run `just format` to ensure proper formatting
- **Lint Code**: Run `just lint` to check for issues
- **Run Tests**: Execute `just test` to verify functionality
- **CI Check**: Run `just ci-check` for comprehensive validation

## Post-Development Validation

### Mandatory Checks

```bash
# Format and lint
just format
just lint

# Run tests
just test

# Comprehensive validation
just ci-check
```

### Documentation Updates

- **Requirements**: Update if implementation reveals new requirements
- **Tasks**: Update task status and completion criteria
- **User Stories**: Update if user stories are affected
- **Architecture**: Update if architectural changes are made

## Error Handling and Debugging

### Common Issues

- **Markdown Formatting**: Use `just format` to fix formatting issues
- **Test Failures**: Fix test failures before reporting success
- **Linting Errors**: Address all linting issues before committing
- **Documentation Inconsistencies**: Ensure documentation aligns with code changes

### Debugging Commands

```bash
# Check specific file formatting
gofmt -w internal/package/file.go

# Run specific tests
go test ./internal/package -v

# Check for linting issues
golangci-lint run ./internal/package

# Validate markdown
markdownlint project_spec/*.md
```

## Integration Guidelines

### Cross-Component Changes

- **Interface Changes**: Update all implementations when interfaces change
- **Model Updates**: Ensure all converters and processors handle model changes
- **Template Changes**: Update all template references and usage
- **Plugin Updates**: Verify plugin compatibility and registration

### Testing Strategy

- **Unit Tests**: Test individual components in isolation
- **Integration Tests**: Test component interactions
- **End-to-End Tests**: Test complete workflows
- **Performance Tests**: Verify performance with large configurations

## Key Commands Reference

### Development Commands

```bash
just dev          # Run in development mode
just build        # Build with all checks
just install      # Install dependencies
just update-deps  # Update dependencies
```

### Quality Commands

```bash
just format       # Format code and documentation
just lint         # Run linting checks
just test         # Run test suite
just ci-check     # Run comprehensive checks
```

### Documentation Commands

```bash
just docs         # Serve documentation locally
```

## Required Documentation References

AI agents must familiarize themselves with:

- **[requirements.md](project_spec/requirements.md)** - Complete functional and technical requirements
- **[ARCHITECTURE.md](ARCHITECTURE.md)** - System design, data flow, and component architecture
- **[DEVELOPMENT_STANDARDS.md](DEVELOPMENT_STANDARDS.md)** - Go-specific coding standards and project structure

These documents provide the complete context needed for effective development and decision-making within the opnFocus project.

## Key Documents

- **[AGENTS.md](AGENTS.md)** - AI agent development guidelines
- **[DEVELOPMENT_STANDARDS.md](DEVELOPMENT_STANDARDS.md)** - Go coding standards
- **[ARCHITECTURE.md](ARCHITECTURE.md)** - System architecture
- **[project_spec/requirements.md](project_spec/requirements.md)** - Requirements specification
- **[project_spec/tasks.md](project_spec/tasks.md)** - Implementation tasks

---
alwaysApply: true
---

This project is opnDossier, located at <https://github.com/EvilBit-Labs/opnDossier>. The project is a tool for auditing and reporting on OPNsense configurations, with the primary goal of generating a markdown view derived from the OPNsense config.xml file.

## Rule Precedence

**CRITICAL - Rules are applied in the following order of precedence:**

1. **Project-specific rules** (from project root instruction files like AGENTS.md or .cursor/rules/)
2. **General development standards** (outlined in this document)
3. **Language-specific style guides** (Go conventions, etc.)

When rules conflict, always follow the rule with higher precedence.

## 🎯 Core Philosophy

- **Operator-Focused:** Build tools for operators, by operators. Workflows should be intuitive and efficient for the end-user
- **Offline-First:** Systems must operate in fully offline or airgapped environments with no external dependencies
- **Structured Data:** Data should be structured, versioned, and portable for auditable, actionable, and reliable systems
- **Framework-First:** Leverage built-in functionality of established frameworks. Avoid custom solutions when established ones exist

### EvilBit Labs Brand Principles

- **Trust the Operator:** Full control, no black boxes
- **Polish Over Scale:** Quality over feature-bloat
- **Offline First:** Built for where the internet isn't
- **Sane Defaults:** Clean outputs, CLI help that's actually helpful
- **Ethical Constraints:** No dark patterns, spyware, or telemetry

---

## 🔧 Technology Stack

- **CLI Framework:** `cobra` v1.8.0 for command organization
- **Configuration:** `charmbracelet/fang` for styled help, errors, and features + `spf13/viper` for configuration parsing
- **Styling:** `charmbracelet/lipgloss` for terminal output
- **Markdown:** `charmbracelet/glamour` for rendering
- **XML Parsing:** `encoding/xml` for OPNsense config files (XML tags must strictly follow OPNsense structure)
- **Logging:** `charmbracelet/log` for structured logging
- **Data Formats:** Support for XML, JSON, and YAML export formats
- **Multi-Format Export:** Convert configurations to markdown, JSON, or YAML formats

## Data Processing Patterns

### Data Model Standards

- **OpnSenseDocument**: Core data model representing entire OPNsense configuration
- **XML Tags**: Must strictly follow OPNsense configuration file structure
- **JSON/YAML Tags**: Follow recommended best practices for each format
- **Audit-Oriented Modeling**: Create internal structs (`Finding`, `Target`, `Exposure`) that represent red/blue audit concepts separately from core config structs

### Report Generation

- **Presentation-Aware Output**: Each report mode must format and prioritize data differently based on audience: ops (standard), defense (blue), adversary (red)
- **Data Processing Pipeline**: Transform the data model into different report formats
- Blue team reports should favor clarity, grouping, and actionability
- Red team reports should favor target prioritization and pivot surface discovery

---

## 🧰 Code Quality Standards

- Use `gofmt` formatting with tabs for indentation (Go standard)
- Follow Go naming conventions: `camelCase` for variables/functions, `PascalCase` for types
- Always check errors and provide meaningful context using `fmt.Errorf` or `errors.Wrap`
- Use structured logging with `charmbracelet/log` instead of `fmt.Printf`
- Implement proper error handling with context preservation
- Reuse existing utilities and structures; avoid new dependencies unless necessary

---

## 🧪 Testing Requirements

- Run `just test` and `just ci-check` for validation
- Use table-driven tests for multiple scenarios
- Aim for >80% test coverage
- Fix test failures before reporting success
- Include test output in reports

---

## 📝 Development Workflow

- Review files before editing
- Match existing code patterns and conventions
- Use `just` commands for build and development tasks
- Follow conventional commit format: `<type>(<scope>): <description>`
- Keep reports concise (3-5 bullets)

---

## 🚩 Issue Resolution

When encountering problems:

- Identify the specific issue clearly
- Explain the problem in ≤ 5 lines
- Propose a concrete path forward
- Don't proceed without resolving blockers

---

## 🔒 Security Principles

- **No Secrets in Code:** Never hardcode API keys, passwords, or sensitive data in source code
- **Environment Variables:** Use environment variables or secure vaults for configuration secrets
- **Input Validation:** Always validate and sanitize user inputs
- **Secure Defaults:** Default to secure configurations
- **File Permissions:** Use restrictive file permissions (0600 for config files)
- **Error Messages:** Avoid exposing sensitive information in error messages

---

## ⚠️ Safety Guidelines

- No destructive actions or major refactors without explicit permission
- Don't modify protected files (deploy scripts, infrastructure) without approval
- Stay focused on the current task; avoid scope creep

---

## 🔧 CLI Development Patterns

- Use `cobra` for command organization with consistent verb patterns
- Use `charmbracelet/fang` for configuration management
- Use `charmbracelet/lipgloss` for styled terminal output
- Use `charmbracelet/glamour` for markdown rendering
- Use `encoding/xml` for XML parsing
- Implement proper error handling with context preservation

## 🚨 Final Reminder

You're here to deliver. No side quests. No second-guessing.

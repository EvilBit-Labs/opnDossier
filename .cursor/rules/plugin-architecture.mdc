# Plugin Architecture Guidelines

## Core Plugin Components

The plugin architecture is defined in the following files:

- [internal/plugin/interfaces.go](mdc:internal/plugin/interfaces.go) - Contains the `CompliancePlugin` interface, `Control`, and `Finding` structs
- [internal/audit/plugin.go](mdc:internal/audit/plugin.go) - Contains `PluginRegistry`, plugin management, and dynamic plugin loader
- [internal/audit/plugin_manager.go](mdc:internal/audit/plugin_manager.go) - Contains `PluginManager` for high-level operations
- [internal/audit/plugins/](mdc:internal/audit/plugins/) - Directory containing built-in plugin implementations

## Plugin Development Standards

### Interface Compliance

All plugins must implement the `CompliancePlugin` interface:

- `Name() string` - Unique plugin identifier
- `Version() string` - Plugin version
- `Description() string` - Human-readable description
- `RunChecks(config *model.OpnSenseDocument) []Finding` - Execute compliance checks
- `GetControls() []Control` - Return all controls
- `GetControlByID(id string) (*Control, error)` - Get specific control
- `ValidateConfiguration() error` - Validate plugin config

The `Finding` struct is generic and uses `References`, `Tags`, and `Metadata` fields. Do not use compliance-specific fields.

### Plugin Structure

- Place new static plugins in [internal/plugins/](mdc:internal/plugins/) with subdirectories for each plugin
- For dynamic plugins, create a Go plugin (`-buildmode=plugin`) that exports `var Plugin plugin.CompliancePlugin`
- Use the existing [internal/plugins/stig/stig.go](mdc:internal/plugins/stig/stig.go) as a template for static plugins

### Control Design

- Use consistent naming scheme: `PLUGIN-001`, `PLUGIN-002`, etc.
- Include all required fields: ID, Title, Description, Category, Severity, Rationale, Remediation
- Use appropriate severity levels: `critical`, `high`, `medium`, `low`
- Include relevant tags for categorization

### Dynamic Plugin Loading

- Dynamic plugins are loaded from a configurable directory (default: `./plugins`)
- Each dynamic plugin must export `var Plugin plugin.CompliancePlugin`
- Dynamic plugins must be built with the same Go version and dependencies as the main binary
- Both static and dynamic plugins are supported and can coexist

### Testing Requirements

- Create comprehensive tests for each plugin
- Test plugin metadata, controls, and compliance checks
- Use table-driven tests for multiple scenarios
- Ensure >80% test coverage

## Documentation

- Reference [docs/dev-guide/plugin-development.md](mdc:docs/dev-guide/plugin-development.md) for detailed development guide
- Document all controls with rationale and implementation details
- Include usage examples and troubleshooting information

- Reference [docs/dev-guide/plugin-development.md](mdc:docs/dev-guide/plugin-development.md) for detailed development guide
- Document all controls with rationale and implementation details
- Include usage examples and troubleshooting information

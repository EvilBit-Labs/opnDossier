---
description: Go documentation standards following Google best practices
globs: **/*.go,**/*.md,**/README*
alwaysApply: false
---

# ðŸ“š Go Documentation Best Practices (Google Standards)

## Package Documentation

- Every package should have a package comment
- Start with `Package packagename` followed by a description
- Use complete sentences and proper grammar
- Keep it concise but informative
- Place package comment before package declaration

```go
// Package parser provides functionality for parsing OPNsense configuration files.
// It supports XML parsing and conversion to structured data formats.
// The package includes utilities for validation and transformation of configuration data.
package parser
```

## Function Documentation

- Document all exported functions and types
- Use complete sentences starting with the function name
- Describe parameters, return values, and error conditions
- Include usage examples for complex functions
- Follow Go documentation conventions

```go
// ParseConfig reads and parses an OPNsense configuration file.
// The filename parameter specifies the path to the XML configuration file.
// It returns a structured representation of the configuration
// or an error if the file cannot be read or parsed.
// The returned Config struct contains all configuration sections
// including system settings, interfaces, and firewall rules.
func ParseConfig(filename string) (*Config, error) {
    // implementation
}
```

## Type Documentation

- Document all exported types and interfaces
- Explain the purpose and usage of each type
- Include field descriptions for structs
- Document any constraints or requirements
- Use clear, descriptive language

```go
// Config represents an OPNsense configuration structure.
// It contains all the settings and parameters for the firewall
// and network configuration. The struct is designed to be
// serializable to both XML and JSON formats.
type Config struct {
    // System contains system-level configuration including
    // hostname, domain, timezone, and user settings.
    System SystemConfig `xml:"system" json:"system"`

    // Interfaces contains network interface configuration
    // for WAN, LAN, and other network interfaces.
    Interfaces InterfaceConfig `xml:"interfaces" json:"interfaces"`

    // Filter contains firewall rules and filtering configuration.
    Filter FilterConfig `xml:"filter" json:"filter"`
}
```

## README Files

- Create comprehensive README.md files
- Include installation and usage instructions
- Provide examples and code snippets
- Document configuration options
- Include troubleshooting section
- Follow standard README structure

## Code Comments

- Use comments to explain "why" not "what"
- Comment complex algorithms and business logic
- Use TODO, FIXME, and NOTE comments appropriately
- Keep comments up to date with code changes
- Use clear, concise language

```go
// TODO: Add support for IPv6 configuration parsing
// FIXME: Handle malformed XML gracefully
// NOTE: This function is called frequently, optimize for performance
// BUG: Memory leak in large file processing
```

## API Documentation

- Document all public APIs thoroughly
- Include parameter validation rules
- Document error conditions and codes
- Provide usage examples
- Use consistent documentation style

```go
// ConvertToMarkdown converts an OPNsense configuration to markdown format.
// The function takes a Config struct and returns a formatted markdown string.
// The output includes all configuration sections with proper formatting
// and hierarchical structure.
//
// Example:
//   config, err := ParseConfig("config.xml")
//   if err != nil {
//       return err
//   }
//   markdown := ConvertToMarkdown(config)
//   fmt.Println(markdown)
func ConvertToMarkdown(config *Config) string {
    // implementation
}
```

## Example Code

- Include example code in `*_example_test.go` files
- Provide complete, runnable examples
- Show common usage patterns
- Include error handling examples
- Use realistic data in examples

```go
// Example_parseConfig demonstrates how to parse a configuration file.
func Example_parseConfig() {
    config, err := ParseConfig("config.xml")
    if err != nil {
        log.Fatal(err)
    }
    fmt.Printf("Parsed config for hostname: %s\n", config.System.Hostname)
    // Output: Parsed config for hostname: firewall.example.com
}

// Example_convertToMarkdown demonstrates markdown conversion.
func Example_convertToMarkdown() {
    config := &Config{
        System: SystemConfig{Hostname: "firewall"},
    }
    markdown := ConvertToMarkdown(config)
    fmt.Println(markdown)
    // Output: # OPNsense Configuration
    // ## System
    // Hostname: firewall
}
```

## Documentation Standards

- Use consistent formatting and style
- Follow Go documentation conventions
- Use proper markdown formatting
- Include links to related documentation
- Maintain documentation alongside code changes

## Version Documentation

- Document breaking changes clearly
- Maintain changelog or release notes
- Include migration guides for major versions
- Document deprecation notices
- Use semantic versioning

## Command Documentation

- Document all CLI commands and flags
- Provide usage examples
- Explain configuration options
- Include troubleshooting tips
- Use consistent command documentation style

```go
var convertCmd = &cobra.Command{
    Use:   "convert [file]",
    Short: "Convert OPNsense config to markdown",
    Long: `Convert an OPNsense configuration file to markdown format.

The convert command reads an XML configuration file and generates
a human-readable markdown document with all configuration details.

The output includes:
- System configuration (hostname, domain, timezone)
- Network interfaces (WAN, LAN, VLANs)
- Firewall rules and NAT configuration
- DHCP and DNS settings

Examples:
  opndossier convert config.xml
  opndossier convert config.xml -o output.md
  opndossier convert config.xml --display`,
    Args:  cobra.ExactArgs(1),
    RunE:  runConvert,
}
```

## Error Documentation

- Document all error types and codes
- Explain error conditions and causes
- Provide guidance on error resolution
- Include error handling examples
- Use consistent error documentation

## Performance Documentation

- Document performance characteristics
- Include memory usage information
- Document concurrency limitations
- Provide optimization guidelines
- Include benchmark results when relevant

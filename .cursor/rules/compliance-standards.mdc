# Compliance Standards Guidelines

## Compliance Framework

### Supported Standards

- **STIG**: Security Technical Implementation Guide compliance
- **SANS**: SANS Firewall Checklist compliance
- **Firewall Security**: CIS-inspired firewall security controls

### Compliance Documentation

- [docs/compliance-standards.md](mdc:docs/compliance-standards.md) - Comprehensive compliance standards documentation
- [docs/cis-like-firewall-reference.md](mdc:docs/cis-like-firewall-reference.md) - Firewall security controls reference

## Audit Engine Architecture

### Core Components

- [internal/audit/engine.go](mdc:internal/audit/engine.go) - Main audit engine implementation
- [internal/audit/standards.go](mdc:internal/audit/standards.go) - STIG and SANS control definitions
- [internal/plugin/interfaces.go](mdc:internal/plugin/interfaces.go) - Plugin interface definitions

### Plugin-Based Architecture

- [internal/audit/plugin.go](mdc:internal/audit/plugin.go) - Plugin registry and management
- [internal/audit/plugin_manager.go](mdc:internal/audit/plugin_manager.go) - High-level plugin operations
- [internal/plugins/](mdc:internal/plugins/) - Plugin implementations directory
- Dynamic plugins can be loaded from a configurable directory as `.so` files, allowing new standards to be added without code changes.

## Compliance Implementation Standards

### Control Definitions

- Use consistent control ID naming: `STIG-V-XXXXXX`, `SANS-XXX`, `FIREWALL-XXX`
- Include all required fields: Title, Description, Category, Severity, Rationale, Remediation
- Use appropriate severity levels: `critical`, `high`, `medium`, `low`
- Include relevant tags for categorization and filtering

### Audit Findings

- Use the generic `Finding` struct for all audit results
- Use the `References` array for all control or external references (no compliance-specific fields)
- Use `Tags` for categorization and filtering
- Provide actionable recommendations with clear remediation steps
- Use consistent component categorization

### Compliance Checking

- Implement checks in separate, focused functions
- Use descriptive function names that indicate what is being checked
- Handle configuration edge cases gracefully
- Return meaningful findings with proper severity levels

## Multi-Format Export and Validation

### Export Standards

- Support export to markdown, JSON, and YAML formats
- Validate exported files are parseable by standard tools and libraries
- Implement smart file naming with overwrite protection
- Use `-f` flag for force overwrite operations
- Usage: `opnfocus convert config.xml --format [markdown|json|yaml]`

### Validation Integration

- Apply validation automatically during parsing
- Provide explicit validation via CLI commands
- Handle large configurations with memory-efficient approaches
- Enhance configuration integrity by validating against rules and constraints

## Integration Guidelines

### Plugin Development

- Follow the plugin interface defined in [internal/plugin/interfaces.go](mdc:internal/plugin/interfaces.go)
- Use [internal/plugins/stig/stig.go](mdc:internal/plugins/stig/stig.go) as a template for static plugins
- Implement all required interface methods
- Include comprehensive testing for all controls
- New compliance standards can be added as dynamic plugins by building and dropping in `.so` files

### Template Integration

- Use templates in [internal/templates/](mdc:internal/templates/) for report generation
- Support multiple report modes: standard, blue, red
- Include compliance matrices in blue team reports
- Highlight attack surfaces in red team reports

## Testing Requirements

### Compliance Testing

- Test all compliance controls with various configurations
- Use table-driven tests for multiple scenarios
- Test both compliant and non-compliant configurations
- Verify proper severity levels and categorization

### Plugin Testing

- Test plugin lifecycle: registration, validation, execution
- Test plugin integration with audit engine
- Verify plugin metadata and control definitions
- Test plugin error handling and edge cases

- Test plugin integration with audit engine
- Verify plugin metadata and control definitions
- Test plugin error handling and edge cases

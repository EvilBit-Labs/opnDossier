package markdown

import (
	"context"
	"os"
	"path/filepath"
	"testing"

	"github.com/EvilBit-Labs/opnDossier/internal/model"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// TestTemplateOverride tests that user template overrides work correctly.
func TestTemplateOverride(t *testing.T) {
	// Create a temporary directory for user templates
	tempDir := t.TempDir()

	// Create a custom template that overrides the standard template
	customTemplate := `# Custom Template Override

## System Information
Hostname: {{.System.Hostname}}
Domain: {{.System.Domain}}

## Custom Section
This is a custom template that should override the built-in template.

Generated by opnDossier {{.ToolVersion}} at {{.Generated}}
`

	// Write the custom template to the temp directory
	templatePath := filepath.Join(tempDir, "opnsense_report.md.tmpl")
	err := os.WriteFile(templatePath, []byte(customTemplate), 0o600)
	require.NoError(t, err)

	// Create a test configuration
	testCfg := &model.OpnSenseDocument{
		System: model.System{
			Hostname: "test-firewall",
			Domain:   "test.local",
		},
	}

	// Test that the custom template is used when template directory is specified
	t.Run("custom_template_override", func(t *testing.T) {
		generator, err := NewMarkdownGeneratorWithTemplates(nil, tempDir)
		require.NoError(t, err, "Failed to create markdown generator with custom templates")

		opts := Options{
			Format:        FormatMarkdown,
			Comprehensive: false, // Use standard template
		}

		result, err := generator.Generate(context.Background(), testCfg, opts)
		require.NoError(t, err, "Template rendering should not fail")

		// Verify that the custom template content is present
		assert.Contains(t, result, "Custom Template Override")
		assert.Contains(t, result, "Custom Section")
		assert.Contains(t, result, "This is a custom template that should override the built-in template")
		assert.Contains(t, result, "test-firewall")
		assert.Contains(t, result, "test.local")
	})

	// Test that built-in templates are still available for comprehensive mode
	t.Run("builtin_templates_fallback", func(t *testing.T) {
		generator, err := NewMarkdownGeneratorWithTemplates(nil, tempDir)
		require.NoError(t, err, "Failed to create markdown generator with custom templates")

		opts := DefaultOptions().WithComprehensive(true)

		result, err := generator.Generate(context.Background(), testCfg, opts)
		require.NoError(t, err, "Template rendering should not fail")

		// Should not contain custom template content for comprehensive mode
		assert.NotContains(t, result, "Custom Template Override")
		assert.NotContains(t, result, "Custom Section")
		// Should contain built-in comprehensive template content
		assert.Contains(t, result, "test-firewall")
		assert.Contains(t, result, "test.local")
	})
}

// TestTemplateOverrideWithReports tests that user template overrides work for report templates.
func TestTemplateOverrideWithReports(t *testing.T) {
	// Create a temporary directory for user templates
	tempDir := t.TempDir()

	// Create reports subdirectory
	reportsDir := filepath.Join(tempDir, "reports")
	err := os.Mkdir(reportsDir, 0o750)
	require.NoError(t, err)

	// Create a custom comprehensive template
	customComprehensiveTemplate := `# Custom Comprehensive Report

## System Information
Hostname: {{.System.Hostname}}
Domain: {{.System.Domain}}

## Custom Comprehensive Section
This is a custom comprehensive template that should override the built-in template.

Generated by opnDossier {{.ToolVersion}} at {{.Generated}}
`

	// Write the custom template to the reports subdirectory
	templatePath := filepath.Join(reportsDir, "opnsense_report_comprehensive.md.tmpl")
	err = os.WriteFile(templatePath, []byte(customComprehensiveTemplate), 0o600)
	require.NoError(t, err)

	// Create a test configuration
	testCfg := &model.OpnSenseDocument{
		System: model.System{
			Hostname: "test-firewall",
			Domain:   "test.local",
		},
	}

	// Test that the custom comprehensive template is used
	t.Run("custom_comprehensive_template_override", func(t *testing.T) {
		generator, err := NewMarkdownGeneratorWithTemplates(nil, tempDir)
		require.NoError(t, err, "Failed to create markdown generator with custom templates")

		opts := DefaultOptions().WithComprehensive(true)

		result, err := generator.Generate(context.Background(), testCfg, opts)
		require.NoError(t, err, "Template rendering should not fail")

		// Verify that the custom template content is present
		assert.Contains(t, result, "Custom Comprehensive Report")
		assert.Contains(t, result, "Custom Comprehensive Section")
		assert.Contains(t, result, "This is a custom comprehensive template that should override the built-in template")
		assert.Contains(t, result, "test-firewall")
		assert.Contains(t, result, "test.local")
	})
}

// TestTemplateOverrideInvalidDirectory tests that the system gracefully handles invalid template directories.
func TestTemplateOverrideInvalidDirectory(t *testing.T) {
	// Test with a non-existent directory
	nonExistentDir := "/non/existent/directory"

	generator, err := NewMarkdownGeneratorWithTemplates(nil, nonExistentDir)
	require.NoError(t, err, "Should not fail with invalid template directory")

	// Create a test configuration
	testCfg := &model.OpnSenseDocument{
		System: model.System{
			Hostname: "test-firewall",
			Domain:   "test.local",
		},
	}

	opts := DefaultOptions()

	result, err := generator.Generate(context.Background(), testCfg, opts)
	require.NoError(t, err, "Should fall back to built-in templates")
	assert.NotEmpty(t, result, "Should generate output using built-in templates")
	assert.Contains(t, result, "test-firewall", "Should contain hostname from built-in template")
}

// TestTemplateOverrideEmptyDirectory tests that the system works with empty template directories.
func TestTemplateOverrideEmptyDirectory(t *testing.T) {
	// Create an empty temporary directory
	tempDir := t.TempDir()

	generator, err := NewMarkdownGeneratorWithTemplates(nil, tempDir)
	require.NoError(t, err, "Should not fail with empty template directory")

	// Create a test configuration
	testCfg := &model.OpnSenseDocument{
		System: model.System{
			Hostname: "test-firewall",
			Domain:   "test.local",
		},
	}

	opts := DefaultOptions()

	result, err := generator.Generate(context.Background(), testCfg, opts)
	require.NoError(t, err, "Should fall back to built-in templates")
	assert.NotEmpty(t, result, "Should generate output using built-in templates")
	assert.Contains(t, result, "test-firewall", "Should contain hostname from built-in template")
}

// TestNewMarkdownGeneratorWithTemplates tests the new constructor function.
func TestNewMarkdownGeneratorWithTemplates(t *testing.T) {
	t.Run("with_template_directory", func(t *testing.T) {
		// Create a temporary directory for user templates
		tempDir := t.TempDir()

		generator, err := NewMarkdownGeneratorWithTemplates(nil, tempDir)
		require.NoError(t, err, "Should create generator with template directory")
		assert.NotNil(t, generator, "Generator should not be nil")
	})

	t.Run("without_template_directory", func(t *testing.T) {
		generator, err := NewMarkdownGeneratorWithTemplates(nil, "")
		require.NoError(t, err, "Should create generator without template directory")
		assert.NotNil(t, generator, "Generator should not be nil")
	})

	t.Run("nil_logger", func(t *testing.T) {
		generator, err := NewMarkdownGeneratorWithTemplates(nil, "")
		require.NoError(t, err, "Should create generator with nil logger")
		assert.NotNil(t, generator, "Generator should not be nil")
	})
}

// TestTemplateOverrideBackwardCompatibility tests that the original NewMarkdownGenerator still works.
func TestTemplateOverrideBackwardCompatibility(t *testing.T) {
	generator, err := NewMarkdownGenerator(nil)
	require.NoError(t, err, "Original constructor should still work")
	assert.NotNil(t, generator, "Generator should not be nil")

	// Test that it can generate output
	testCfg := &model.OpnSenseDocument{
		System: model.System{
			Hostname: "test-firewall",
			Domain:   "test.local",
		},
	}

	opts := DefaultOptions()

	result, err := generator.Generate(context.Background(), testCfg, opts)
	require.NoError(t, err, "Should generate output")
	assert.NotEmpty(t, result, "Should generate non-empty output")
	assert.Contains(t, result, "test-firewall", "Should contain hostname")
}
